Node Masterclass - fold to line 48
--------------------------------------------------------------------------------
Node fullstack development
--------------------------------------------------------------------------------
  Node http module           | require('http') 
  http server function       | .createServer(callback(req, res))
  http port listener         | .listen(portNumber)
                             | 
                             | require('http').createServer((req, res) => res.end('hello world!')).listen(3000)
  Assign process port        | const port = process.env.PORT || 1337 
                             | 
  request functions          | 
    url                      | req.url
    match                    | req.url.match(regex) 
                             | 
  response functions         | 
    setHeader                | res.setHeader('Content-type', {contentType})
    writeHead                | res.writeHead(404, {'Content-type': 'text/plain'})
    end                      | res.end({content-type dependent output}) 
                             | 
                             | 
                             | 
--------------------------------------------------------------------------------
express                      | const express = require('express') 
  express has a built-in     | 
  router                     | const app = express()
                             | app.get(endpoint, functioncall)
                             |   ( app.get ('/', getIndex) )
                             | 
  listen                     | app.listen(port, () => console.log('Server listening'))
                             | 
                             | 
  you don't usuall have to   | res.end('hi') -> no setHeader required
  set the content type       | 
                             | 
  json                       | res.json({symbol: 'value'}) -> automatically
                             |          stringifies it for you
                             | 
  query string               | req.query -> const { input = ''} = req.query
                             | 
  params                     | req.params[0]
                             | 
--------------------------------------------------------------------------------
Node packages                | 
  builtin                    | http 
                             | querystring
                             | fs
                             | 
--------------------------------------------------------------------------------
NodeJS masterclass
Building a RESTful API - 160
  Routing requests - 195
  Returning JSON -  220
  Adding Configuration - 226
  Configuring HTTPS - 240
  Storing Data - 249
--------------------------------------------------------------------------------
Table of contents            | Section 1: 
                             |  Overview, introduce the course, 
                             | 
                             | Section 2: 
                             |  How node.js works, how v8 works and the 
                             |  history of Node.js
                             | 
                             | Section 3:
                             |  build a RESTful API
                             | 
                             | Seciton 4:
                             |  Build a webapp GUI
                             | 
                             | Section 5
                             |  Build a CLI 
                             | 
                             | Section 6:
                             |  Debuggin, testing and linting
                             | 
                             | Section 7:
                             |  Performance and Scalability
                             | 
                             | Section 8:
                             |  All the loose ends
--------------------------------------------------------------------------------
What is V8, exactly?         | In order to execute high-level code 
                             | the computer uses
                             |
                             | - Interpreters
                             | - Compilers
                             | - Transpilers
                             |
                             | Compilers
                             |  Take source code and turn it inot an executable
                             |  (a file full of code the computer can execute)
                             |
                             | Transpilers
                             |  Take source code and turn it into source code 
                             |  of another type
                             |
                             | Interpreters
                             |  Take source coed and directly execute it by 
                             |  taking realtime intermediate steps. But, they
                             |  dont' leave anything behind
                             |
                             | V8 is a Javascript Engine
                             | (which is a type of javascript interpreter)
                             |
--------------------------------------------------------------------------------
What is Node.js, exactly?    | Node.js is a server-side javascript runtime
                             | environment
                             |
REPL - (Read Eval Print Loop)|
                             |
--------------------------------------------------------------------------------
Common Node Conventions      | package.json = contains meta data and list of 
                             |  dependencies for an projects
                             |
Testing and Task Running     | Testing script are commonly held in a /test dir
                             | and are triggered by a "tes runner" such as 
                             | Mocha
                             |
                             | General-purpose task runners often controll the 
                             | whole process. Grunt and Gulp are the most 
                             | popular
                             |
--------------------------------------------------------------------------------
Environments & Configuration | Option 1:
                             |  Start your app with
                             |    NODE_ENV=myEnvironmentName node index.js
                             | 
                             |  Put your configuration in a file, (eg config.js)
                             |  
                             |  That switch should read process.env.NODE_ENV
                             |  to determing the cuurent environment, and export
                             |  only the config variables for that environment.
                             |  
                             | Option 2: 
                             |  Start your app with every configuration variable
                             |  you're going to need for that environment:
                             |  
                             |  DBpassword=myDBpasswort apiToken=mySecretToken
                             |  port=thePortIshouldRunOn foo=bar node index.js
                             |  
                             | Option 3:  
                             |  Read all your configuration from a .env file 
                             |  Wich gets ignored by source controll.
                             |  
                             |  Each deve would put their own .env file in the
                             |  project prior to beginning localhost work.
                             |  
                             |  Your deployment pipline would insert an .env 
                             |  file into the repo before it deploys anywhere.
--------------------------------------------------------------------------------
Node.js vs the Browser       | There are several global variables and functions  
                             | that are not available in Node, for example:
                             |  
                             | window.open          document  
                             | window.location      document.body 
                             | window.navigator     onchange  
                             | window.origin        onclick  
                             | window.blur          onblur 
--------------------------------------------------------------------------------
Building a RESTful API       |  
--------------------------------------------------------------------------------
http                         | The primary, builtin, library which is used to   
                             | build http servers/api. It can be assigned to a 
                             | variable:  const http = require('http') 
                             |  
 .createServer()             | the create server listens to requests then 
                             | returns two values, the request and the response
                             | which then can be used in a call back to handle  
                             | the users request 
                             |  
                             |  
                             |  
url                          | Library for url related tasks 
                             |  const url = require('url')
                             |  
 .parse(req.url, true)       | url method, first attr req.url, second used to call 
                             | queryString module 
                             |  
  parsed.pathname            | parse returns a parsed string object which has a  
                             | pathname variable.. it contains leading and ending 
                             | slashed 
                             |  
  parsed.query               | a parsed url can return any query string(?) values
                             | as an object
                             |  
  .replace(/^\/+|\/+$/g,'')  | removes both leading and ending slashed                 
--------------------------------------------------------------------------------
Parsing HTTP Methods         |  
  req.method.toLowerCase     | used to retrieve the method from the request  
                             |  
  req.headers                | retrieves the headers as an object  
--------------------------------------------------------------------------------
parsing Payloads (http body) | require('string_decoder').StringDecoder (lib to decode st)  
setting charset of decoder   | new StringDecoder('utf-8') 
req.on('data', callback)     | decoder.write()  
                             |  
--------------------------------------------------------------------------------
Routing Requests
--------------------------------------------------------------------------------
common pattern to check if   | typeof(somthing) == 'undefined' 
item exists                  | test = typeof(somthing) == 'undefined' ? something : defaultValue; 
                             |  
define a router              | a router can be and object url(key) : handler(value)  
                             |   pairs
                             | const router = { 
                             |    '/'     : handlers.root,
                             |    '/home' : handlers.home,
                             |    '/bio'  : handlers.bio 
                             | }
                             |  
define handler               | handlesrs can be objects with the key assigned to 
                             | an anonymous function, which accepts a data object 
                             | and issued a callback (returning a status code and 
                             | and a payload
                             | 
                             | const handlers = {};  // initial assignment 
                             | handlers.home = function(data, callback){
                             |   callback(404, {'name' : 'home handler'})
                             | 
--------------------------------------------------------------------------------
Returning JSON
--------------------------------------------------------------------------------
change content type          | res.setHeader('Content-Type', 'application/json')
                             | 
--------------------------------------------------------------------------------
Adding Configuration
--------------------------------------------------------------------------------
                             | adding files so as to start an app for different 
                             | environments
                             | 
at the command line          | $ NODE_ENV=staging nodejs index.js <-- at commandline 
                             | 
                             | 
                             | 
                             | 
                             | 
                             | 
                             | 
--------------------------------------------------------------------------------
Configuring HTTPS 
--------------------------------------------------------------------------------
Create new ssl               | openssl rec -newkey rsa:2048 -new -nodes -x509 -days 3650 
                             |   -keyout key.pem -out cert.pem
                             | 
asyn file read               | fs.readFileSync({location of file}) 
                             | 
--------------------------------------------------------------------------------
Storing Data
--------------------------------------------------------------------------------
FS package  (FIle System)    | 
  fs.open (open file)        | fs.open(pathToFile,flags,mode,callback);
                             |   --> callback(err, fileDescriptor) 
                             |   --> filedescriptor provided by fs.open 
                             |
  fs.writeFile (to open file)| fs.writeFile(fileDescriptor, stringData, callback);
    if fs.open did not return|   --> callback(err)
    error and provided a     | 
    file descriptor          | 
                             | 
  fs.close                   | fs.close(fileDescriptor, callback) 
                             |   --> callback(err) 
                             | 
Path package                 | const path = require('path');
                             | path.join(__dirname, '/path/to/asset/'); 
                             | 
                             | 
                             | 
                             | 
